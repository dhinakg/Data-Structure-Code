//To check whether a given Linked List is a palindrome or not
//Author : Krishank S. Mehta
//Date   : 1/22/2017
//Time   : 4:09 AM


#include<iostream>

using namespace std;


struct node
{
    int data;
    node* next;

};

void init_node(node* head, int n)
{
    head->data=n;
    head->next=NULL;
}

void add_node(node* head,int n)
{
    node* newnode=new node;
    newnode->data=n;
    newnode->next=NULL;

    node* cur=head;

    while(cur)
    {
        if(cur->next==NULL)
        {
            cur->next=newnode;
            return;
        }
        cur=cur->next;
    }
    
}

int count(node* head)
{
    node* cur=head;
    int count=0;
    while(cur)
    {
        count+=1;
        cur=cur->next;
    }
    return count;

}

bool palindrome(node *head, int z)
{   node*pre=head;
    int value=0;
    int temp=z-1;
    for(int i=0; i<z/2; i++)
    {   node *cur=head;
        for(int j=0; j<temp; j++)
        {
            cur=cur->next;
        }
        --temp;

        if(pre->data==cur->data)
        {
            value+=1;
            
        }
        pre=pre->next;

    }
    
    if(value==(z/2))
    {
        return true;
    }
    else {
        return false;
    }

}

void display(node* head)
{
    node * cur=head;
    while(cur)
    {
        cout<<cur->data<<" ";
        cur=cur->next;
    }
    cout<<endl;
}

int main()
{
    node* head= new node;
    init_node(head,10);
    add_node(head,20);
    add_node(head,30);
    add_node(head,20);
    add_node(head,10);
    cout<<"Here is the Linked List: ";
    display(head);
    int x;
    x=count(head);
    if(palindrome(head,x))
    {
        cout<<"The List is Palindrome"<<endl;;
    }
    else if(!(palindrome(head,x)))
    {
        cout<<"The List is Not Palindrome"<<endl;
    }

}
